<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" 
		 xmlns="weave.ui.admin.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%"
		 creationComplete="getSchemas()"
		 xmlns:ui="weave.ui.*">
	<mx:HBox>
		<mx:Label width="{indent}" text="{StringDefinition.DEFAULT_SQL_SCHEMA_LABEL}" textAlign="left"/>
		<ui:CustomComboBox id="schemaInput" toolTip="{StringDefinition.DEFAULT_SQL_SCHEMA_DROPDOWNBOX_TOOLTIP}" text="{activeSchema}" dataProvider="{schemas}" change="activeSchema = schemaInput.text;"/>
		<mx:Button label="Refresh" click="getSchemas()" toolTip="{StringDefinition.DEFAULT_SCHEMAS_REFRESH_BUTTON_TOOLTIP}"/>
	</mx:HBox>
	<mx:HBox id="tableControls">
		<mx:Label width="{indent}" id="tableLabel" text="{StringDefinition.DEFAULT_SQL_TABLE_LABEL}" textAlign="left"/>
		<ui:CustomComboBox id="_tableCombo" editable="true" text="{activeTable}" dataProvider="{tables}" change="activeTable = _tableCombo.text;" toolTip="{StringDefinition.DEFAULT_SQL_TABLE_DROPDOWNBOX_TOOLTIP}"/>
		<mx:TextInput id="_tableInput" editable="true" text="{activeTable}" change="activeTable = _tableInput.text;"/>
		<mx:Button id="tablesRefreshButton" label="Refresh" click="getTables()" toolTip="{StringDefinition.DEFAULT_TABLES_REFRESH_BUTTON_TOOLTIP}"/>
		<mx:CheckBox label="Overwrite" id="tableOverwriteCheck" selected="false" visible="{tableOverwriteCheckVisible}"/>
	</mx:HBox>
	<mx:Metadata>
		[Exclude(name="_tableCombo", kind="property")]
		[Exclude(name="_tableInput", kind="property")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.StringDefinition;
			import weave.services.*;
			import weave.utils.ByteArrayUtils;
			
			[Bindable]
			public var indent:int = 145;
			
			[Bindable]
			public var tableOverwriteCheckVisible:Boolean = true;

			// values returned by the server that depend on the active selected values
			[Bindable] public var schemas:Array = [];
			[Bindable] public var tables:Array = [];
			[Bindable] public var columns:Array = [];

			override protected function initializationComplete():void
			{
				super.initializationComplete();
				
				if (_showTableCombo)
					tableControls.removeChild(_tableInput);
				else
					tableControls.removeChild(_tableCombo);
			}
			
			private var _showTableCombo:Boolean = true;
			[Inspectable] public function set showTableCombo(value:Boolean):void
			{
				_showTableCombo = value;
			}

			public function getSchemas():void
			{
				activeSchema = '';
				// clear current list, then request new list
				schemas = [];
				AdminInterface.instance.service.getSchemas(
					AdminInterface.instance.activeConnectionName,
					AdminInterface.instance.activePassword
				).addAsyncResponder(handleGetSchemas);
				
				function handleGetSchemas(event:ResultEvent, token:Object = null):void
				{
					schemas = event.result as Array;
					// set active schema to first result
					if (schemas.length > 0)
						activeSchema = schemas[0];
				}
			}
			
			
			private var _activeSchema:String = "";
			[Bindable] public function get activeSchema():String
			{
				return _activeSchema;
			}
			public function set activeSchema(value:String):void
			{
				if (_activeSchema != value)
				{
					_activeSchema = value;
					getTables();
				}
			}
			
			public function getTables():void
			{
				if (!_showTableCombo)
					return;
				activeTable = '';
				// clear current list, then request new list
				tables = [];
				if (activeSchema != '')
					AdminInterface.instance.service.getTables(
						AdminInterface.instance.activeConnectionName,
						AdminInterface.instance.activePassword,
						activeSchema
					).addAsyncResponder(handleGetTables);
				
				function handleGetTables(event:ResultEvent, token:Object = null):void
				{
					tables = event.result as Array;
					// set active table to first result
					if (tables.length > 0)
						activeTable = tables[0];
				}
			}
			
			private var _activeTable:String = "";
			[Bindable] public function get activeTable():String
			{
				return _activeTable;
			}
			public function set activeTable(value:String):void
			{
				if (_activeTable != value)
				{
					_activeTable = value;
					getColumns();
				}
			}
			
			public function getColumns():void
			{
				// clear current list, then request new list
				columns = [];
				if (activeSchema != '' && activeTable != '')
					AdminInterface.instance.service.getColumns(
						AdminInterface.instance.activeConnectionName,
						AdminInterface.instance.activePassword,
						activeSchema,
						activeTable
					).addAsyncResponder(handleGetColumns);
				
				function handleGetColumns(event:ResultEvent, token:Object = null):void
				{
					columns = event.result as Array;
				}
			}
		]]>
	</mx:Script>
</mx:VBox>
