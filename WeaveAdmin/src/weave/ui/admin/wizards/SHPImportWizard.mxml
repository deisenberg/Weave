<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<admin:WizardViewStack
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:ui="weave.ui.*"
			xmlns:admin="weave.ui.admin.*"
			xmlns="weave.ui.admin.wizards.*" 
			label="Import shape data"
			width="640" height="300"
			creationComplete="handleCreationComplete()"
			>
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="100%">
			<mx:Label text="Load Shape files" width="{indent}"/>
			<mx:TextInput id="shpFileNameInput" enabled="true"/>
			<mx:Button label="Upload ..." click="browseAndUploadShapeFiles();"/>
			<mx:Button label="Choose File on Server" click="openServerBrowser();" />
			<mx:Label text="{fileUploadCount > 0 ? fileUploadCount + ' of ' + targetFileUploadCount + ' files uploaded' : ''}"/>
		</mx:HBox>
		<mx:HBox id="dbfColumnNames" enabled="false">
			<mx:Label text="DBF Key column names" width="{indent}"/>
			<ui:CustomComboBox id="dbfKeyColumnsCombo" dataProvider="{AdminInterface.instance.dbfKeyColumns}" editable="true"/>
			<mx:Button label="?" click="Alert.show('Separate DBF column names by commas.  Values in the given columns will be concatenated to form unique identifiers for the shapes. These keys will also be used as the keys of the DataTable entry created from the DBF file.', 'Shape Converter Help')"/>
		</mx:HBox>
		<admin:SQLTableSelectorDialog indent="{indent}" id="tableSelector" enabled="false" showTableCombo="false" creationComplete="tableSelector.tableLabel.text = 'SQL Table Prefix';" activeTable="{shpFileNameInput.text}" tableOverwriteCheckVisible="{AdminInterface.instance.currentUserIsSuperuser}"/>
	</mx:VBox>
	<mx:VBox width="100%" height="100%">
		<mx:HBox id="nullReplacement" enabled="false" toolTip="Specify flag values to treat as missing data, separated by commas">
			<mx:Label enabled="true" text="Null flag values" width="{indent}"/>
			<mx:TextInput enabled="true" id="nullFlagInput" editable="true"/>
		</mx:HBox>
		<mx:HBox id="geoCol" enabled="false">
			<mx:TextArea width="{indent}" borderThickness="0" editable="false" selectable="false" wordWrap="true" text="GeometryCollection &amp; DataTable name"/>
			<mx:TextInput id="geometryCollectionNameInput" text="{tableSelector.activeTable}"/>
			<mx:CheckBox label="Overwrite" id="configOverwriteCheck" selected="false"/>
			<mx:Button label="?" click="Alert.show('Both a GeometryCollection and DataTable entry will be created in sqlconfig.xml having the name specified here.', 'Shape Converter Help')"/>
		</mx:HBox>
		<mx:HBox id="keyType" enabled="false">
			<mx:Label text="Key type" width="{indent}"/>
			<ui:CustomComboBox id="shpKeyTypeCombo" minWidth="100" text="{geometryCollectionNameInput.text}" editable="true" dataProvider="{AdminInterface.instance.keyTypes}" toolTip="{StringDefinition.DEFAULT_SHAPE_KEY_TYPE_DROPDOWNBOX_TOOLTIP}"/>
			<mx:Button label="Refresh" click="AdminInterface.instance.getKeyTypes()"/>
			<mx:Button label="?" click="showHelpForKeyType()"/>
		</mx:HBox>
		<mx:HBox id="projectionCode" enabled="false">
			<mx:Label text="Projection SRS" width="{indent}"/>
			<mx:TextInput id="srsProjectionTxtInput" text="EPSG:4326"/>  <!-- is it a good idea to use the standard lat/long as the default? -->
			<mx:Button id="srsProjectionValidateBtn" label="Validate" click="validateProjectionSRS()"/>
		</mx:HBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.ResultEvent;
			
			import weave.StringDefinition;
			import weave.api.WeaveAPI;
			import weave.services.AdminInterface;
			import weave.services.DelayedAsyncInvocation;
			import weave.services.WeaveAdminService;
			import weave.ui.admin.ServerCSVFileViewer;
			import weave.ui.admin.ServerSHPFileViewer;
			
			[Bindable] private var indent:int = 140;
			
			private function handleCreationComplete():void
			{
				shapeFileReferenceList.addEventListener(Event.SELECT, shapeFileSelectedHandler);
				
				backEnabled = false;
				nextEnabled = false;
				finishEnabled = false;
			}
			
			[Bindable] private var fileUploadCount:int = 0;
			[Bindable] private var targetFileUploadCount:int = 0;
			private var _dbfFileToRequestColumnNamesFrom:FileReference;
			private function shapeFileSelectedHandler(event:Event):void
			{
				fileUploadCount = 0;
				targetFileUploadCount = shapeFileReferenceList.fileList.length;
				shpFileNameInput.text = '';
				for each (var fileRef:FileReference in shapeFileReferenceList.fileList)
				{
					var name:String = fileRef.name;
					var ext:String = name.substr(name.length - 4).toLowerCase(); // lower case extension
					var nameWithoutExt:String = name.substr(0, name.length - 4);
					if (ext == ".shp")
					{
						if (shpFileNameInput.text != '')
							shpFileNameInput.text += ',';
						shpFileNameInput.text += nameWithoutExt;
					}
					if (ext == ".dbf")
					{
						AdminInterface.instance.dbfKeyColumns = [];
						_dbfFileToRequestColumnNamesFrom = fileRef;
					}
					
					fileRef.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
					fileRef.addEventListener(Event.COMPLETE, handleFileLoadComplete);
					fileRef.load();
				}
			}
			
			private var shapeFileReferenceList:FileReferenceList = new FileReferenceList();
			private function browseAndUploadShapeFiles():void
			{
				var fileTypes:Array = [new FileFilter("Shape Files", "*.*")];
				shapeFileReferenceList.browse(fileTypes);
			}

			private function fileErrorHandler(event:IOErrorEvent):void
			{
				var fileRef:FileReference = event.target as FileReference;
				if (shapeFileReferenceList.fileList.indexOf(fileRef) >= 0)
				{
					WeaveAdminService.messageDisplay(
						"File upload failed",
						"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text,
						true
					);
				}
			}
			
			private function handleFileLoadComplete(event:Event):void
			{
				var fileRef:FileReference = event.target as FileReference;
				if (shapeFileReferenceList.fileList.indexOf(fileRef) >= 0)
				{
					var query:DelayedAsyncInvocation = AdminInterface.instance.uploadFile(fileRef);
					query.addAsyncResponder(handleFileUploadComplete, null, fileRef);
				}
			}
			
			private function handleFileUploadComplete(event:ResultEvent, token:Object = null):void
			{
				if (shapeFileReferenceList.fileList.indexOf(token) >= 0)
				{
					fileUploadCount++;
					
					// handle dbf file uploaded
					if (token == _dbfFileToRequestColumnNamesFrom)
					{
						AdminInterface.instance.listDBFFileColumns(_dbfFileToRequestColumnNamesFrom.name);
						enableAllWidgets();
					}
				}
			}
			
			private var _serverFileBrowser:ServerSHPFileViewer = null;
			private function openServerBrowser():void
			{
				_serverFileBrowser = ServerSHPFileViewer.createServerFileViewer(this);
				_serverFileBrowser.selectButton.addEventListener(MouseEvent.CLICK, serverFileBrowserSelectFile);				
			}
			private function serverFileBrowserSelectFile(e:MouseEvent):void
			{
				var tableName:String = _serverFileBrowser.datagrid.selectedItem.name;
				tableName = tableName.substring(0,tableName.lastIndexOf("."));
				
				shpFileNameInput.text = tableName;
				
				AdminInterface.instance.listDBFFileColumns(tableName+".dbf");
				tableSelector.activeTable = tableName;
				
				PopUpManager.removePopUp(_serverFileBrowser);
				enableAllWidgets();
			}
			
			override public function finish():void
			{
				var alertTitle:String = "Missing parameter";
				if (shpFileNameInput.text == '')
					Alert.show("You must upload a DBF file.", alertTitle);
				else if (dbfKeyColumnsCombo.text == '')
					Alert.show("You must specify the name(s) of the key column(s) in the DBF file.", alertTitle);
				else if (tableSelector.activeTable == '')
					Alert.show("You must specify the name of the destination SQL table.", alertTitle);
				else if (geometryCollectionNameInput.text == '')
					Alert.show("You must specify the name of the GeometryCollection to be visible by users.", alertTitle);
				else
				{
//					importSHPButton.enabled = false;
//					var enableImportSHPButton:Function = function(...args):void
//					{
//						importSHPButton.enabled = true;
//					};
					
					AdminInterface.instance.convertShapefileToSQLStream(
							shpFileNameInput.text,
							dbfKeyColumnsCombo.text.split(","),
							tableSelector.activeSchema,
							tableSelector.activeTable,
							tableSelector.tableOverwriteCheck.selected,
							geometryCollectionNameInput.text,
							configOverwriteCheck.selected,
							shpKeyTypeCombo.text,
							srsProjectionTxtInput.text,
							nullFlagInput.text
						);
				}
			}
			
			private function showHelpForKeyType():void
			{
				Alert.show(
					'If two tables have compatible keys, you should give them the same key type.  ' +
					'If two tables have incompatible keys, they should not have the same key type.  ' +
					'Weave only allows two columns to be compared if they have the same key type.',
					'Admin Console Help'
				);
			}
			
			private function enableAllWidgets(enable:Boolean = true):void
			{
				dbfColumnNames.enabled = enable;
				geoCol.enabled = enable;
				nullReplacement.enabled = enable;
				keyType.enabled = enable;
				tableSelector.enabled = enable;
				nextEnabled = enable;
				backEnabled = enable;
				finishEnabled = enable;
				projectionCode.enabled = enable;
			}
			
			private function validateProjectionSRS():void
			{
				var alertTitle:String = 'Projection Validation';
				var message:String;
				
				if (WeaveAPI.ProjectionManager.projectionExists(srsProjectionTxtInput.text))
					message = 'Projection code is valid.';
				else
					message = 'Projection code is invalid or not recognized.';
				
				Alert.show(message, alertTitle);
			}
		]]>
	</mx:Script>
</admin:WizardViewStack>
