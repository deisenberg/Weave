<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" label="Grid Line Settings"
		 creationPolicy="all" width="100%" borderStyle="solid" cornerRadius="5">
	

	<mx:Script>
		<![CDATA[
			import weave.visualization.tools.SimpleVisTool;
			
			private var _tool:SimpleVisTool = null;
			[Inspectable]
			public function set tool(value:SimpleVisTool):void
			{
				_tool = value;
			}
			
			override protected function childrenCreated():void
			{
				_tool.visualization.gridLineColor.addGroupedCallback(this,gridColorCallback,true);
				_tool.visualization.gridLineAlpha.addGroupedCallback(this,gridLineAlphaCallback,true);
				_tool.visualization.gridLineThickness.addGroupedCallback(this,gridLineThicknessCallback,true);
			}
			
			private function gridColorCallback():void
			{
				gridColorPicker.selectedColor = _tool.visualization.gridLineColor.value;
			}
			private function gridColorPicked():void
			{
				_tool.visualization.gridLineColor.value = gridColorPicker.selectedColor;
			}
			
			private function gridLineAlphaCallback():void
			{
				gridLineAlphaSlider.value = _tool.visualization.gridLineAlpha.value;
			}
			private function gridLineAlphaChanged():void
			{
				_tool.visualization.gridLineAlpha.value = gridLineAlphaSlider.value;
			}
			
			private function gridLineThicknessCallback():void
			{
				gridLineThicknessStepper.value = _tool.visualization.gridLineThickness.value;
			}
			private function gridLineThicknessChanged():void
			{
				_tool.visualization.gridLineThickness.value = gridLineThicknessStepper.value;
			}
			
			private function alphaSliderFormatFunction(value:Number):String {
				//return int(100 - (value * 100)) + "% Transparent";
				return int((value * 100)) + "% Opaque" + "\n" + int(100 - (value * 100)) + "% Transparent";
			}
			
		]]>
	</mx:Script>
	<mx:Label fontWeight="bold" text="Grid Line Settings"/>
	<mx:HBox width="100%">
			
		<mx:HBox width="15%">
			<mx:Label text="Color:" fontWeight="bold" />
			<mx:ColorPicker toolTip="Select a color for the grid lines of this visualization" id="gridColorPicker" change="gridColorPicked()"/>
		</mx:HBox>
		
		<mx:HBox width="60%">
			<mx:Label text="Opacity:" fontWeight="bold" />
			<mx:HSlider id="gridLineAlphaSlider" 
						width="100%" 
						snapInterval="0.1"
						tickInterval="0.5" labels="{['0%','50%','100%']}" 
						dataTipFormatFunction="alphaSliderFormatFunction"
						minimum="0.0" maximum="1.0" 
						liveDragging="true" change="gridLineAlphaChanged()"/>
		</mx:HBox>
		
		<mx:HBox width="25%">
			<mx:Label text="Thickness:" fontWeight="bold" />
			<mx:NumericStepper id="gridLineThicknessStepper" change="gridLineThicknessChanged()" minimum="1" maximum="10"/>
		</mx:HBox>
	
	</mx:HBox>
</mx:VBox>