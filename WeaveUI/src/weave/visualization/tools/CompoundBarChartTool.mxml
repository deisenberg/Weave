<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
	     layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeySet;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.SessionManager;
			import weave.core.weave_internal;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.primitives.Bounds2D;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DraggablePanel;
			import weave.ui.DynamicColumnComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.AxisLayer;
			import weave.visualization.plotters.AxisPlotter;
			import weave.visualization.plotters.CompoundBarChartPlotter;
			import weave.visualization.plotters.ProbeLinePlotter;

			use namespace weave_internal;

			public var _plotter:CompoundBarChartPlotter = null;

			override protected function constructor():void
			{
				super.constructor();

				// lock dynamic objects into place
				_plotter = initDefaultPlotter(CompoundBarChartPlotter) as CompoundBarChartPlotter;
				visualization.enableProbeLine(false, true);
				_plotter.groupMode.addGroupedCallback(this, updateProbeLines ) ;
				_plotter.horizontalMode.addGroupedCallback(this, updateProbeLines ) ;
				
				yAxisEnabled = true;
				xAxisEnabled = true;
				
				var objects:Array = [
						xAxisLayer.axisPlotter,
						yAxisLayer.axisPlotter,
						visualization.marginLeft,
						visualization.marginBottom,
						visualization.marginTop,
						visualization.marginRight,
						labelColumn,
						_plotter
					];
				for each (var object:ILinkableObject in objects)
					getCallbackCollection(object).addGroupedCallback(this, updateAxisLabels, true);

				showAllLabels.value = false;

				visualization.marginBottom.value = 80;
				visualization.marginLeft.value = 80;
				visualization.marginTop.value = 10;
				visualization.marginRight.value = 10;
				
				visualization.enableZoomAndPan.value = false;


				visualization.enableXAxisProbing = true;
				visualization.enableYAxisProbing = true;
				
				toolTitle.addGroupedCallback(this, updateTitle, true);

				//BEGIN TEMPORARY SOLUTION
				// END TEMPORARY SOLUTION
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, handleAxisClick, [true]);
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, handleAxisClick, [false]);
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [_plotter.sortColumn];
				for (var i:int = 0; i < count; i++)
				{
					columnsToInit.push(_plotter.heightColumns.requestObject(null, DynamicColumn, false));
				}
				if(columnsToInit.length > 0)
					(initColumnDefaults as Function).apply(null, columnsToInit);
				_plotter.heightColumns.addGroupedCallback(this,updateProbeColumns);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				cRampEditor.colorRamp = _plotter.chartColors;
				linkBindableProperty(_plotter.horizontalMode, horizontalCheckBox, "selected");
				linkBindableProperty(_plotter.groupMode, groupCheckBox, "selected");
				linkBindableProperty(_plotter.barSpacing, barSpacingSlider, "value");
				linkBindableProperty(showAllLabels, showAllLabelsCheckBox, "selected");
				linkBindableProperty(_plotter.groupMode, visualization, "barChartGroupMode" );
				linkBindableProperty(_plotter.horizontalMode, visualization, "barChartHorizontalMode" );
				
				getCallbackCollection(_plotter.heightColumns).addGroupedCallback(this, updateInteractivity, true);
				getCallbackCollection(_plotter.groupMode).addGroupedCallback(this, updateInteractivity);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Color","Label", "Sort","Height","Positive Error", "Negative Error"];
			}
			override public function getSelectableAttributes():Array
			{
				return [colorColumn,labelColumn, _plotter.sortColumn,_plotter.heightColumns,_plotter.positiveError,_plotter.negativeError];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeLines():void
			{
				if( _plotter.groupMode.value ) 
					visualization.disableProbelines();
				else if( _plotter.horizontalMode.value) 
					visualization.enableProbeLine(true, false);
				else
					visualization.enableProbeLine(false, true ) ;
			}
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					var columns:Array = _plotter.heightColumns.getObjects(IAttributeColumn);
					if (columns.length <= 1)
					{
						// get all ReferencedColumn objects
						var refCols:Array = (WeaveAPI.SessionManager as SessionManager).getDescendants(_plotter.colorColumn, ReferencedColumn);
						for each (var col:IAttributeColumn in refCols)
							columns.unshift(col);
					}
					columns.unshift(labelColumn, _plotter.sortColumn);
					columns.push(_plotter.positiveError, _plotter.negativeError);
					visualization.additionalProbeColumns = columns;
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			private function numberToString(value:Number):String
			{
				return value.toString();
			}
			
			private function handleAxisClick(isXAxis:Boolean):void
			{
				if ((isXAxis ?1:0) ^ (_plotter.horizontalMode.value ?1:0)) // xor
					AttributeSelectorPanel.openToolSelector(this,_plotter.sortColumn);
				else
					AttributeSelectorPanel.openToolSelector(this,_plotter.heightColumns);
			}
			
			public const labelColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
			
			/**
			 * When this is set to true, labels for all bars will be shown.
			 */
			public const showAllLabels:LinkableBoolean = newLinkableChild(this, LinkableBoolean, updateAxisLabels, true);
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
				{
					var columns:Array = _plotter.heightColumns.getObjects(IAttributeColumn);
					for (var i:int = 0; i < columns.length; i++)
						columns[i] = ColumnUtils.getTitle(columns[i] as IAttributeColumn);
					title = "Bar Chart of " + columns.join(', ');
				}
			}
			
			
			public const sizeAxisTickCountRequested:LinkableNumber = registerLinkableChild(this, new LinkableNumber(5), updateAxisLabels, true);

			private function updateAxisLabels():void
			{
				updateTitle();
				
				var heightColumns:Array = _plotter.heightColumns.getObjects();
				
				var barAxisTitle:String = "Sorted by " + ColumnUtils.getTitle(_plotter.sortColumn);
				var sizeAxisTitle:String = '';
				for (var i:int = heightColumns.length - 1; i >= 0; i--) // reverse order
				{
					sizeAxisTitle += ColumnUtils.getTitle(heightColumns[i] as IAttributeColumn);
					if (i > 0)
						sizeAxisTitle += ', ';
				}
				if (sizeAxisTitle == '')
					sizeAxisTitle = "Click to select...";

				var sizeAxisToolTipColumn:IAttributeColumn = heightColumns.length > 0 ? heightColumns[0] : null;
				var barAxisToolTipColumn:IAttributeColumn = _plotter.sortColumn;
				
				var barAxisLayer:AxisLayer;
				var sizeAxisLayer:AxisLayer;
				
				var xAxisTitle:String; // title for x axis, whether or not horizontal mode is on
				var yAxisTitle:String; // title for y axis, whether or not horizontal mode is on

				// BEGIN handling of horizontal/vertical mode ----------------------
				
				if (_plotter.horizontalMode.value)
				{
					barAxisLayer = yAxisLayer;
					yAxisTitle = barAxisTitle;
					visualization.setYAxisColumn(barAxisToolTipColumn);
					
					sizeAxisLayer = xAxisLayer;
					xAxisTitle = sizeAxisTitle;
					visualization.setXAxisColumn(sizeAxisToolTipColumn);
				}
				else
				{
					xAxisTitle = barAxisTitle;
					barAxisLayer = xAxisLayer;
					visualization.setXAxisColumn(barAxisToolTipColumn);
					
					yAxisTitle = sizeAxisTitle;
					sizeAxisLayer = yAxisLayer;
					visualization.setYAxisColumn(sizeAxisToolTipColumn);
				}

				barAxisLayer.axisPlotter.setLabelFunction(sortAxisLabelFunction);
				sizeAxisLayer.axisPlotter.setLabelFunction(null);
				
				// size axis uses automatic min,max based on data
				sizeAxisLayer.axisPlotter.tickMinValue.value = NaN;
				sizeAxisLayer.axisPlotter.tickMaxValue.value = NaN;
				sizeAxisLayer.axisPlotter.forceTickCount.value = false;
				sizeAxisLayer.axisPlotter.tickCountRequested.value = sizeAxisTickCountRequested.value;

				// bar axis auto min,max would be -0.5, numBars-0.5.  we don't want that.
				barAxisLayer.axisPlotter.tickMinValue.value = 0;
				barAxisLayer.axisPlotter.tickMaxValue.value = _plotter.numBarsShown-1;
				barAxisLayer.axisPlotter.forceTickCount.value = showAllLabels.value;
				if (showAllLabels.value)
					barAxisLayer.axisPlotter.tickCountRequested.value = _plotter.numBarsShown;
				else
					barAxisLayer.axisPlotter.tickCountRequested.value = Math.min(_plotter.numBarsShown, 11);
				
				// END handling of horizontal/vertical mode --------------------------------
				
				xAxisLayer.axisPlotter.setSideAxisName(xAxisTitle, 0, 0, visualization.marginBottom.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisLayer.axisPlotter.setSideAxisName(yAxisTitle, -90, -visualization.marginLeft.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			private function sortAxisLabelFunction(value:Number):String
			{
				// get the sorted keys from the plotter
				var sortedKeys:Array = _plotter.getSortedKeys();
				
				// cast the input value from the axis to an int (not ideal at all, need to make this more robust)
				var sortedKeyIndex:int = int(value);
				
				// if this key is out of range, we have a problem
				if (sortedKeyIndex < 0 || sortedKeyIndex > sortedKeys.length-1)
					return "Invalid tick mark value: "+value.toString();
				
				// if the labelColumn doesn't have any data, use default label
				if (labelColumn.internalColumn == null)
					return null;
				
				// otherwise return the value from the labelColumn
				return labelColumn.getValueFromKey(sortedKeys[sortedKeyIndex], String);
			}
			
			public function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
				
		
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			private function updateInteractivity():void
			{
				if (!parent)
					return callLater(updateInteractivity);
				if(_plotter.heightColumns.getNames().length > 1)
				{
					cRampEditor.enabled = true;
					groupCheckBox.enabled = true;
				}
				else
				{
					cRampEditor.enabled = false;
					groupCheckBox.enabled = false;
				}
				colorColumInput.enabled = _plotter.heightColumns.getNames().length <= 1;
			}
			
			private const groupCheckDisabledToolTip:String = 'There is only one attribute chosen for this bar chart, therefore it is a standard (not grouped or stacked) and this feature is disabled.';
			private const groupCheckEnabledToolTip:String = 'Check this box to group rather than stack the bars.  \n\nIn stacked mode each segment representing a single record at a given attribute are placed together along a single bar, each segment representing a proportion of the entire bar length.  \n\nIn grouped mode, each bar representing a single record at a given attribute are placed side-by-side.';
			
			protected function Legend_clickHandler(event:MouseEvent):void
			{
				var barChartLegendTool:BarChartLegendTool = Weave.root.requestObject(null, BarChartLegendTool, false);
				barChartLegendTool.dynamicBarChartTool.globalName = Weave.root.getName(this);
			}

		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes">
			
			<ui:DynamicColumnComponent visTool="{this}" id="colorColumInput" label="Color Column" initialize="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"
									   toolTip="Color column selection is enabled when only a single column is in the list below."/>
			<ui:DynamicColumnComponent visTool="{this}" id="labelColumInput" label="Label Column" initialize="(event.target as DynamicColumnComponent).dynamicObject = labelColumn"/>
			<ui:DynamicColumnComponent visTool="{this}" label="Bars Sorted By:" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.sortColumn"/>
			<ui:ColumnListComponent visTool="{this}" label="Height attributes" minimumNumObjectsInList="1" id="dimensionsList" initialize="(event.target as ColumnListComponent).hashMap = _plotter.heightColumns"/>
		</mx:VBox>
		
		<mx:VBox id="cRamp" label="Bar Properties">
			<mx:Button id="Legend" label="legend" click="Legend_clickHandler(event)"/>
			<mx:HBox>
				<userControls:ControlsSubsetBox >
					<mx:CheckBox id="horizontalCheckBox" label="Horizontal bars"
								 toolTip="Check this box to display the bars horizontally, with values setting the length of the bar (from left to right) rather than the height (from bottom to top)."/>
				</userControls:ControlsSubsetBox>
				<userControls:ControlsSubsetBox >
					<mx:CheckBox id="groupCheckBox" label="Grouped bars"
								 toolTip="{groupCheckBox.enabled ? groupCheckEnabledToolTip : groupCheckDisabledToolTip}"/>
				</userControls:ControlsSubsetBox>
			</mx:HBox>
			<userControls:ControlsSubsetBox >
				<mx:Label text="Bar spacing:"/>
				<mx:HSlider id="barSpacingSlider" value="0" minimum="0" maximum="1" labels="['No Gap', '1:4', '1:1']" tickInterval="0.25"
							toolTip="Move this slider to change the gap between bars.  All the way to the left means no gap.  The highest value is a 1:1 ratio, meaning equal bar width to gap width." showDataTip="false"
							liveDragging="true"/>
			</userControls:ControlsSubsetBox>
			<userControls:ControlsSubsetBox>
				<mx:CheckBox id="showAllLabelsCheckBox" label="Show all bar labels"
							 toolTip="This option will always show a label for each bar."/>
			</userControls:ControlsSubsetBox>
			<userControls:ControlsSubsetBox width="100%">
				<mx:CheckBox id="zoomToSubsetCheckBox" label="Zoom to Subset" 
							 toolTip="Enables automatic zooming to the subset of data currently displayed"
							 creationComplete="linkBindableProperty(_plotter.zoomToSubset, zoomToSubsetCheckBox, 'selected')"/>
			</userControls:ControlsSubsetBox>
			<userControls:ControlsSubsetBox>
				<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
							 toolTip="Checking this box makes all of the following attributes visible in this tool's probe tooltip"
							 initialize="linkBindableProperty(includeToolAttributesInProbe,probeColumnsCheckBox,'selected')"/>
			</userControls:ControlsSubsetBox>
			
		</mx:VBox>
		<mx:VBox id="advControlsPanel" label="Advanced">
			<ui:ColorRampEditor id="cRampEditor" toolTip="The color ramp can only be set when more than one height column is specified."/>
			<ui:DynamicColumnComponent visTool="{this}" label="Positive Error:" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.positiveError"/>
			<ui:DynamicColumnComponent visTool="{this}" label="Negative Error:" initialize="(event.target as DynamicColumnComponent).dynamicObject = _plotter.negativeError"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
