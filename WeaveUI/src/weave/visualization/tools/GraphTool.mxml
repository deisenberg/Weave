<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.plotters.GraphPlotter;
			import weave.visualization.plotters.styles.SolidFillStyle;

			
			public var _plotter:GraphPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initDefaultPlotter(GraphPlotter) as GraphPlotter;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;

				getCallbackCollection(visualization.dataBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				/* var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
				{
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				}

				if(columnsToInit.length > 0)
					(initColumnDefaults as Function).apply(null, columnsToInit); */
				
				toolTitle.addImmediateCallback(this, updateTitle);
				_plotter.nodesColumn.addImmediateCallback(this, updateProbeColumns);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				(colorComponent as DynamicColumnComponent).dynamicObject = colorColumn;
				(nodeComponent as DynamicColumnComponent).dynamicObject = nodesColumn;
				(edgeSourceComponent as DynamicColumnComponent).dynamicObject = edgeSourceColumn;
				(edgeTargetComponent as DynamicColumnComponent).dynamicObject = edgeTargetColumn;
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Color", "Node IDs", "Edge Source IDs", "Edge Target IDs"];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.colorColumn, _plotter.nodesColumn, _plotter.edgeSourceColumn, _plotter.edgeTargetColumn];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = [ _plotter.nodesColumn ];//.getObjects(IAttributeColumn);
					if (visualization.additionalProbeColumns.length == 0) 
						visualization.additionalProbeColumns = null;
				}
				else 
					visualization.additionalProbeColumns = null;
			}
			
			private function invalidateAxes():void
			{
				updateTitle();
			}
			
			private function updateTitle():void
			{
				title = "Graph Tool";
 			}
			
			public function get colorColumn():DynamicColumn { return _plotter.colorColumn; }
			public function get nodesColumn():DynamicColumn { return _plotter.nodesColumn; }
			public function get edgeSourceColumn():DynamicColumn { return _plotter.edgeSourceColumn; }
			public function get edgeTargetColumn():DynamicColumn { return _plotter.edgeTargetColumn; }
				
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
		]]>
	</mx:Script>
	
	<ui:ControlPanel>
			<mx:VBox id="VizControlsPanel" label="Visualization Controls">
				<mx:HBox width="100%" 
						 borderStyle="inset" 
						 backgroundColor="0xFFFFFF" 
						 backgroundAlpha="0.7">
					<mx:Label text="Point Opacity:" 
							  color="0x000000" fontSize="12" 
							  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
					
					<mx:HSlider id="alphaSlider"
								width="100%"
								alpha="1.0"
								snapInterval="0.1"
								tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
								dataTipFormatFunction="alphaSliderFormatFunction"
								minimum="0.1" maximum="1.0" value="1.0"
								liveDragging="true"
								initialize="linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, 'value')"/>
				</mx:HBox>
			</mx:VBox>
			
			<mx:VBox id="attributesPanel" label="Attributes for Graph">
				<ui:DynamicColumnComponent visTool="{this}" id="colorComponent" label="Color"/>
				<userControls:ControlsSubsetBox>
					<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
								 toolTip="Checking this box makes all of the following attributes visible in this tool's probe tooltip"
								 initialize="linkBindableProperty(includeToolAttributesInProbe,probeColumnsCheckBox,'selected')"/>
				</userControls:ControlsSubsetBox>
				<ui:DynamicColumnComponent visTool="{this}" id="nodeComponent" label="Nodes"/>
				<ui:DynamicColumnComponent visTool="{this}" id="edgeSourceComponent" label="Edge Sources"/>
				<ui:DynamicColumnComponent visTool="{this}" id="edgeTargetComponent" label="Edge Targets"/>
				
				<!--<ui:ColumnListComponent visTool="{this}" id="edgeColumnList" label="Edges"/>-->
			</mx:VBox>
		<mx:VBox id="algorithmPanel" label="Positioning Parameters">
			<mx:HBox>
				<mx:Label text="Minimum Distance Change"/>
				<mx:TextInput id="minimumEnergyTxtInput" initialize="linkBindableProperty(_plotter.minimumEnergy, minimumEnergyTxtInput, 'text')"/>
			</mx:HBox>
			<mx:HBox>			
				<mx:Label text="Attraction Constant"/>
				<mx:TextInput id="attractionTxtInput" initialize="linkBindableProperty(_plotter.attractionConstant, attractionTxtInput, 'text')"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Repulsion Constant"/>
				<mx:TextInput id="repulsionTxtInput" initialize="linkBindableProperty(_plotter.repulsionConstant, repulsionTxtInput, 'text')"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Node Separation"/>
				<mx:TextInput id="separationTxtInput" initialize="linkBindableProperty(_plotter.nodeSeparation, separationTxtInput, 'text')"/>
			</mx:HBox>

			<mx:HBox>
				<mx:Label text="Damping Constant"/>
				<mx:TextInput id="dampingTxtInput" initialize="linkBindableProperty(_plotter.dampingConstant, dampingTxtInput, 'text')"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Maximum Iterations"/>
				<mx:TextInput id="maxIterationsTxtInput" initialize="linkBindableProperty(_plotter.maxIterations, maxIterationsTxtInput, 'text')"/>
			</mx:HBox>
			<mx:HBox>
				<mx:Label text="Algorithm"/>
				<mx:ComboBox id="algorithmChoice" dataProvider="{[ 'Force Directed', 'FADE', 'Incremental' ]}" 
							 initialize="linkBindableProperty(_plotter.currentAlgorithm, algorithmChoice, 'selectedItem')"/>
			</mx:HBox>
			<mx:Button id="recomputePositions" label="Recalculate Node Positions" click="_plotter.recomputePositions()"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
