<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.plotters.GraphPlotter;
			import weave.visualization.plotters.styles.SolidFillStyle;

			
			public var _plotter:GraphPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				// lock dynamic objects into place
				_plotter = initDefaultPlotter(GraphPlotter) as GraphPlotter;
				
				visualization.enableAutoZoomToExtent.value = true;
				visualization.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;

				getCallbackCollection(visualization.dataBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
				{
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				}

				if(columnsToInit.length > 0)
					(initColumnDefaults as Function).apply(null, columnsToInit);
				
				toolTitle.addImmediateCallback(this, updateTitle);
				_plotter.columns.addImmediateCallback(this, updateProbeColumns);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				columnList.hashMap = _plotter.columns;
				(colorComponent as DynamicColumnComponent).dynamicObject = colorColumn;
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Color","Anchor Dimensions"];
			}
			override public function getSelectableAttributes():Array
			{
				return [colorColumn,_plotter.columns];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if(includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = _plotter.columns.getObjects(IAttributeColumn);
					if(visualization.additionalProbeColumns.length == 0) visualization.additionalProbeColumns = null;
				}
				else visualization.additionalProbeColumns = null;
				//else ProbeTextUtils.probedColumns.copyObject('probedColumns',oldProbeColumns);
			}
			
			private function invalidateAxes():void
			{
				updateTitle();
			}
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
				{				
					// try to get unique attribute names separated by commas
					// should probably be unique names for parallel coordinates, single name for line chart with years listed...?
					var newTitle:String = "Graph of ";
					
					var uniqueColumns:Dictionary = new Dictionary();
					
					for each(var column:IAttributeColumn in _plotter.columns.getObjects(IAttributeColumn) )
					{
						uniqueColumns[ColumnUtils.getTitle(column)] = column;
					}
					
					for (var uniqueTitle:String in uniqueColumns)
					{
						newTitle += uniqueTitle + ", ";
					}
					
					if(newTitle.charAt(newTitle.length-1) == ",")
						newTitle = newTitle.substr(0, newTitle.length-2);
					
					title = newTitle;
				}
			}
			
			public function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
			
			private function alphaSliderFormatFunction(item:Number):String {
				//return int(100 - (item * 100)) + "% Transparent";
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
		]]>
	</mx:Script>
	
	<ui:ControlPanel>
			<mx:VBox id="VizControlsPanel" label="Visualization Controls">
				<mx:HBox width="100%" 
						 borderStyle="inset" 
						 backgroundColor="0xFFFFFF" 
						 backgroundAlpha="0.7">
					<mx:Label text="Point Opacity:" 
							  color="0x000000" fontSize="12" 
							  toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
					
					<mx:HSlider id="alphaSlider"
								width="100%"
								alpha="1.0"
								snapInterval="0.1"
								tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
								dataTipFormatFunction="alphaSliderFormatFunction"
								minimum="0.1" maximum="1.0" value="1.0"
								liveDragging="true"
								initialize="linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, 'value')"/>
				</mx:HBox>
			</mx:VBox>
			
			<mx:VBox id="attributesPanel" label="Attributes for Rad Viz">
				<ui:DynamicColumnComponent visTool="{this}" id="colorComponent" label="Color"/>
				<userControls:ControlsSubsetBox>
					<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
								 toolTip="Checking this box makes all of the following attributes visible in this tool's probe tooltip"
								 initialize="linkBindableProperty(includeToolAttributesInProbe,probeColumnsCheckBox,'selected')"/>
				</userControls:ControlsSubsetBox>
				<ui:ColumnListComponent visTool="{this}" id="columnList" label="Anchor Dimensions"/>
			</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
