<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.registerLinkableChild;
			import weave.api.linkBindableProperty;
			import weave.utils.ColumnUtils;
			import mx.events.FlexEvent;
			
			import weave.Weave;
			import weave.core.LinkableBoolean;
			import weave.core.SessionManager;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.unlinkSessionState;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.AttributeColumns.StringLookup;
			import weave.data.BinningDefinitions.EqualIntervalBinningDefinition;
			import weave.api.data.IBinningDefinition;
			import weave.data.BinningDefinitions.SimpleBinningDefinition;
			import weave.api.data.IKeySet;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.DraggablePanel;
			import weave.utils.BitmapText;
			import weave.visualization.plotters.HistogramPlotter;
			import weave.visualization.plotters.ProbeLinePlotter;
			import weave.primitives.ColorRamp;
		
			public var plotter:HistogramPlotter = null;

			public function get histogramPlotter():HistogramPlotter
			{
				return plotter;
			}
			override protected function constructor():void
			{
				super.constructor();
				
				// lock dynamic objects into place
				plotter = initDefaultPlotter(HistogramPlotter) as HistogramPlotter;
				visualization.enableProbeLine(false, true);

				xAxisEnabled = true;
				yAxisEnabled = true;
				
				xAxisLayer.axisPlotter.forceTickCount.value = true;
				visualization.enableZoomAndPan.value = false;

				visualization.marginBottom.value = 80;
				visualization.marginTop.value    = 10;
				visualization.marginLeft.value   = 80;
				visualization.marginRight.value  = 10;
				
				plotter.dynamicColorColumn.addGroupedCallback(this, handleDynamicColorColumnChange);
				visualization.enableXAxisProbing = true;

				visualization.marginLeft.addGroupedCallback(this, updateAxisLabels);
				visualization.marginBottom.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.dataBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.bottomMarginClickCallbacks.addGroupedCallback(this, openAttributeSelector);
				
				var fc:FilteredColumn = plotter.internalBinnedColumn.internalColumn as FilteredColumn;
				initColumnDefaults(fc.internalDynamicColumn);
				
				toolTitle.addGroupedCallback(this, updateTitle);
				plotter.dynamicColorColumn.addGroupedCallback(this, updateProbeColumns);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Bins"];
			}
			override public function getSelectableAttributes():Array
			{
				return [internalDataColumn];
			}
			
			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);

			private function openAttributeSelector():void
			{
				AttributeSelectorPanel.openToolSelector(this,internalDataColumn);
			}
						
			private function updateProbeColumns():void
			{
				visualization.additionalProbeColumns = [];
				if (includeToolAttributesInProbe.value)
				{
					if (plotter.internalBinnedColumn && plotter.internalBinnedColumn.internalColumn)
						visualization.additionalProbeColumns.push(plotter.internalBinnedColumn.internalColumn);
				}
			}
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
					title = "Histogram of " + ColumnUtils.getTitle(plotter.dynamicColorColumn);
			}

			private var _prevBinnedColumn:BinnedColumn = null;
			private function handleDynamicColorColumnChange():void
			{
				if (!parent)
					return callLater(handleDynamicColorColumnChange);
				
				if (plotter.internalColorColumn)
					cRampEditor.colorRamp = plotter.internalColorColumn.ramp;
				else
					cRampEditor.colorRamp = null;
				
				if (_prevBinnedColumn)
					unlinkSessionState(_prevBinnedColumn, binEditor.binnedColumn);
				
				if (plotter.internalBinnedColumn)
					linkSessionState(plotter.internalBinnedColumn, binEditor.binnedColumn);
				
				
				_prevBinnedColumn = plotter.internalBinnedColumn;
				dataColumnComponent.dynamicObject = internalDataColumn;
			}
			
			public function get internalDataColumn():DynamicColumn
			{
				try
				{
					return (plotter.internalBinnedColumn.internalColumn as FilteredColumn).internalDynamicColumn;
				}
				catch (e:Error) { } // do nothing if there is no data column
				return null;
			}
			
			private function updateAxisLabels():void
			{
				updateTitle();
				
				visualization.setXAxisColumn(plotter.dynamicColorColumn);
				
				var binnedColumn:BinnedColumn = plotter.internalBinnedColumn;
				if (binnedColumn)
				{
					xAxisLayer.axisPlotter.tickCountRequested.value = binnedColumn.numberOfBins;
					xAxisLayer.axisPlotter.tickMinValue.value = 0;
					xAxisLayer.axisPlotter.tickMaxValue.value = binnedColumn.numberOfBins - 1;	
					xAxisLayer.axisPlotter.setLabelFunction(binnedColumn.deriveStringFromNumber);
				}
				else
				{
					xAxisLayer.axisPlotter.setLabelFunction(null);
				}
				
				xAxisLayer.axisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.dynamicColorColumn), 0, 0, visualization.marginBottom.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisLayer.axisPlotter.setSideAxisName("Number of Records", -90, -visualization.marginLeft.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>

	<ui:ControlPanel>
		<mx:VBox label="Visualization Controls">
			<userControls:ControlsSubsetBox>
				<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
							 toolTip="Checking this box makes the tool's binned attribute visible in this tool's probe tooltip"
							 initialize="linkBindableProperty(includeToolAttributesInProbe,probeColumnsCheckBox,'selected')"/>
			</userControls:ControlsSubsetBox>
			<ui:DynamicColumnComponent visTool="{this}" id="dataColumnComponent" label="bin data"/>
			<ui:BinningDefinitionEditor id="binEditor"/>
		</mx:VBox>
		<mx:VBox label="Advanced">
			<ui:ColorRampEditor id="cRampEditor"/>
			<settings:GridLineSettings tool="{this}"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
