<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*" layout="absolute">
	<mx:Script>
		<![CDATA[
			import flash.utils.flash_proxy;
			
			import mx.events.FlexEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.WeaveProperties;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableObject;
			import weave.api.data.AttributeColumnMetadata;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IPlotLayer;
			import weave.core.LinkableBoolean;
			import weave.core.SessionManager;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.primitives.Bounds2D;
			import weave.primitives.LinkableBounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColumnListComponent;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.DebugUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.AxisLayer;
			import weave.visualization.layers.PlotLayer;
			import weave.visualization.layers.SelectablePlotLayer;
			import weave.visualization.plotters.AxisPlotter;
			import weave.visualization.plotters.DynamicPlotter;
			import weave.visualization.plotters.ParallelCoordinatesPlotter;
			import weave.visualization.plotters.TextGlyphPlotter;
			
			public var _plotter:ParallelCoordinatesPlotter = null;
			override protected function constructor():void
			{
				super.constructor();
				
				visualization.marginBottom.value = 80;
				visualization.marginTop.value    = 10;
				visualization.marginLeft.value   = 80;
				visualization.marginRight.value  = 80;
				
				// lock dynamic objects into place
				_plotter = initDefaultPlotter(ParallelCoordinatesPlotter) as ParallelCoordinatesPlotter;
				// add this callback first because it needs to be called for each column that is removed
				_plotter.columns.childListCallbacks.addImmediateCallback(this, handleColumnAddRemoveReorder);
				
				xAxisEnabled = true;
				yAxisEnabled = true;
				visualization.includeNonSelectableLayersInAutoZoom.lock();
				visualization.enableZoomAndPan.value = false;

				//This variable represents whether or not the tool is a 
				//lineChart(false) or parallelCoords(true)
				_plotter.normalize.value = false;
				_plotter.normalize.lock();
				
				addLabelLayer();

				getCallbackCollection(visualization.dataBounds).addGroupedCallback(this, updateAxes);
			
				// BEGIN TEMPORARY SOLUTION
				visualization.marginLeft.addGroupedCallback(this, updateAxes);
				visualization.marginBottom.addGroupedCallback(this, updateAxes);
				visualization.marginTop.addGroupedCallback(this, updateAxes);
				visualization.marginRight.addGroupedCallback(this, updateAxes);

				getCallbackCollection(_plotter).addGroupedCallback(this, updateAxes, true);
				// END TEMPORARY SOLUTION
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, AttributeSelectorPanel.openToolSelector, [this,_plotter.columns]);
				
				var count:int = getDefaultColumnsOfMostCommonKeyType().length;
				var columnsToInit:Array = [];
				for (var i:int = 0; i < count; i++)
					columnsToInit.push(_plotter.columns.requestObject(null, DynamicColumn, false));
				if (columnsToInit.length > 0)
					initColumnDefaults.apply(null, columnsToInit);
				
				toolTitle.addImmediateCallback(this, updateTitle);
				
				_plotter.columns.addGroupedCallback(this, updateProbeColumns, true);
			}

			public const includeToolAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeColumns);
			
			private function updateProbeColumns():void
			{
				if (includeToolAttributesInProbe.value)
				{
					visualization.additionalProbeColumns = _plotter.columns.getObjects(IAttributeColumn);
					visualization.additionalProbeColumns.unshift(colorColumn);
				}
				else
					visualization.additionalProbeColumns = null;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				// fix session state from old versions
				for each (var name:String in visualization.layers.getNames(AxisLayer))
					visualization.layers.removeObject(name);
				
				xAxisLayer.axisPlotter.setLabelFunction( getColumnTitle );
				xAxisLayer.axisPlotter.axisLabelRelativeAngle.value = -45;
				xAxisLayer.axisPlotter.labelHorizontalAlign.value = BitmapText.HORIZONTAL_ALIGN_RIGHT;
				xAxisLayer.axisPlotter.labelVerticalAlign.value = BitmapText.VERTICAL_ALIGN_TOP;
				xAxisLayer.axisPlotter.labelDistanceIsVertical.value = false;
				
				visualization.includeNonSelectableLayersInAutoZoom.value = false;
				
				(labelComponent as DynamicColumnComponent).dynamicObject = labelPlotter.text;
				
				linkBindableProperty(labelPlotter.size.defaultValue,labelSizeSlider,"value");
				linkBindableProperty(labelPlotter.color.defaultValue, colorPicker, "selectedColor");

				linkBindableProperty(_plotter.alphaColumn.defaultValue, 		alphaSlider,		"value");
				linkBindableProperty(_plotter.shapeSize,  					shapeSizeSlider, 	"value");
				linkBindableProperty(_plotter.lineStyle.weight.defaultValue, thickessButtons, 	"selectedValue");
				linkBindableProperty(_plotter.shapeToDraw, shapeCombo, "selectedItem");
				linkBindableProperty(_plotter.shapeBorderThickness, shapeBorderSizeSlider, "value");
				linkBindableProperty(_plotter.shapeBorderColor, shapeBorderColorPicker, "selectedColor");
				
				visualization.getPlotLayer().backgroundIsVisible.addImmediateCallback(this, updateSelectionAndProbeOnlyCheckBox, null, true);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["Color","Label","Columns"];
			}
			override public function getSelectableAttributes():Array
			{
				return [colorColumn,labelPlotter.text,_plotter.columns];
			}
			
			public function get colorColumn():DynamicColumn
			{
				var fc:FilteredColumn = Weave.root.getObject(Weave.DEFAULT_COLOR_DATA_COLUMN) as FilteredColumn;
				return fc.internalDynamicColumn;
			}
			
			private function getColumnTitle( index:Number ):String
			{
				try {
					var columns:Array = _plotter.columns.getObjects();
					return ColumnUtils.getTitle(columns[index]);
				} catch(e:Error) {}
				return "";
			}
			
			private var axisPrefix:String =  "Axis for: ";
			private function handleColumnAddRemoveReorder():void
			{
				var removedName:String = _plotter.columns.childListCallbacks.lastNameRemoved;
				if (removedName != null)
				{
					//trace("removed:",removedName)
					visualization.layers.removeObject(axisPrefix + removedName);
				}
			}
			
			private static const tempBounds:Bounds2D = new Bounds2D(); // reusable temporary object
			
			private function updateAxes():void
			{
				updateTitle();
				
				var columns:Array = _plotter.columns.getObjects();
				
				xAxisLayer.axisPlotter.tickCountRequested.value = Math.max(2, columns.length);
				xAxisLayer.axisPlotter.forceTickCount.value = true;
				xAxisLayer.axisPlotter.axisLabelRelativeAngle.value = -45;
				//xAxisLayer.axisPlotter.axisLabelDistance.value = visualization.marginBottom.value - 5;
				xAxisLayer.axisPlotter.updateLabels();
				
				// get bounds for y axis
				visualization.dataBounds.copyTo(tempBounds);
				tempBounds.xMax = tempBounds.xMin;
				
				yAxisLayer.axisPlotter.axisLineMinValue.value = tempBounds.yMin;
				yAxisLayer.axisPlotter.axisLineMaxValue.value = tempBounds.yMax;
			
				yAxisLayer.axisPlotter.axisLineDataBounds.copyFrom(tempBounds);
				yAxisLayer.axisPlotter.axisLabelRelativeAngle.value = 45;
				yAxisLayer.axisPlotter.tickCountRequested.value = 5;

				yAxisLayer.axisPlotter.updateLabels();			
			}
			
			private function updateTitle():void
			{
				if (toolTitle.value == null)
				{
					var columns:Array = _plotter.columns.getObjects();
					if (columns.length == 0)
					{
						title = 'Line Chart';
						return;
					}
					
					var newTitle:String = "Line Chart of ";
					for (var i:int = 0; i < columns.length; i++)
					{
						if (i > 0)
							newTitle += ', ';
						newTitle += ColumnUtils.getTitle(columns[i]);
					}
					title = newTitle;
				}
			}
			
			private function alphaSliderFormatFunction(value:Number):String {
            	//return int(100 - (value * 100)) + "% Transparent";
            	return int((value * 100)) + "% Opaque" + "\n" + int(100 - (value * 100)) + "% Transparent";
            }
			
			private function updateSelectionAndProbeOnlyCheckBox():void
			{
				selectionAndProbeOnlyCheckBox.selected = !visualization.getPlotLayer().backgroundIsVisible.value;
			}
			private function handleSelectionAndProbeOnlyCheckBox():void
			{
				visualization.getPlotLayer().backgroundIsVisible.value = !selectionAndProbeOnlyCheckBox.selected;
			}
			
			private var labelPlotter:TextGlyphPlotter = null ;
			private function addLabelLayer():void
			{
				var layer:SelectablePlotLayer = visualization.layers.requestObject("label", SelectablePlotLayer, true);
				layer.layerIsSelectable.value = false;
				layer.layerIsSelectable.lock();
				linkSessionState(visualization.getPlotLayer().backgroundIsVisible, layer.backgroundIsVisible);
				labelPlotter = layer.getDynamicPlotter().requestLocalObject(TextGlyphPlotter, true);
				
				_plotter.columns.addImmediateCallback(this, updateColumns, null, true);

				labelPlotter.xScreenOffset.value=5;
				labelPlotter.hAlign.defaultValue.value = BitmapText.HORIZONTAL_ALIGN_LEFT;
				labelPlotter.hideOverlappingText.value = true;
				linkSessionState(labelPlotter.dataY,labelPlotter.sortColumn);
			}
			
			private function updateColumns():void
			{
				var _columns:Array = _plotter.columns.getObjects();
				var x:AlwaysDefinedColumn = labelPlotter.dataX.requestLocalObject(AlwaysDefinedColumn, false);
				x.defaultValue.value = _columns.length - 1;
				
				if (_columns.length == 0)
				{
					labelPlotter.dataY.removeObject();
					return;
				}
			
				var lastColumn:IAttributeColumn = _columns.pop();
				labelPlotter.dataY.copyLocalObject(lastColumn as ILinkableObject);

				if (labelPlotter.text.internalColumn == null)
				{
					var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
					for (var i:int = 0; i < headers.length; i++)
					{
						if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(lastColumn))
						{
							labelPlotter.text.copyLocalObject(headers[i]);
							break;
						}
					}
				}
			}
			
		]]>
	</mx:Script>
	<mx:Number id="controlsFontSize">10</mx:Number>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="Attributes for Line Chart">
			<ui:DynamicColumnComponent visTool="{this}" label="Color" initialize="(event.target as DynamicColumnComponent).dynamicObject = colorColumn"/>
			<ui:DynamicColumnComponent visTool="{this}" label="Label" id="labelComponent"/>
			<mx:HBox width="100%">
				<mx:Label text="Label Text Size: " fontWeight="bold"/>
				<mx:HSlider id="labelSizeSlider"
							width="100%"
							alpha="1.0"
							snapInterval="1"
							tickInterval="2" labels="{['6','8','10','12','14','16','18','20']}"
							minimum="6" maximum="20" 
							liveDragging="true"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="Label Text Color:" fontWeight="bold"/>
				<mx:ColorPicker id="colorPicker" width="22" height="22"/>
			</mx:HBox>
			<userControls:ControlsSubsetBox>
				<mx:CheckBox id="probeColumnsCheckBox" label="Include tool attributes in probe tooltip"
							 toolTip="Checking this box makes all of the tool's attributes visible in this tool's probe tooltip"
							 initialize="linkBindableProperty(includeToolAttributesInProbe,probeColumnsCheckBox,'selected')"/>
			</userControls:ControlsSubsetBox>
			<ui:ColumnListComponent visTool="{this}" label="Drag columns here" initialize="(event.target as ColumnListComponent).hashMap = _plotter.columns"/>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="Visualization Controls">
			<userControls:ControlsSubsetBox width="100%">
				<mx:Label text="Shape:" color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip="This controls what shape is used to indicate the data points on the axes."/>
				<ui:CustomComboBox id="shapeCombo" dataProvider="{ParallelCoordinatesPlotter.shapesAvailable}"/>
				
				<mx:Label text="{shapeCombo.selectedItem == ParallelCoordinatesPlotter.NO_SHAPE ? 'Gap' : 'Shape'} size:" 
						  color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip="This controls the size of the shapes indicating the data points on the axes."/>
				<mx:HSlider id="shapeSizeSlider" 
							width="100%" 
							snapInterval="1"
							tickInterval="1" 
							labels="['0', '1','','','','5','','','','','10','','','','','15','','','','','20']"
							minimum="0" maximum="20" 
							liveDragging="true"/>
				
			</userControls:ControlsSubsetBox>
			
			<userControls:ControlsSubsetBox width="100%" horizontalGap="2">
				<mx:HBox horizontalGap="0">
					<mx:Label text="Border color:" color="0x000000" fontSize="{controlsFontSize}"/>
					<mx:ColorPicker id="shapeBorderColorPicker"
									toolTip="This controls color of the border around the shape at each point."
									enabled="{!(shapeCombo.selectedItem == ParallelCoordinatesPlotter.NO_SHAPE || 
									shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_CIRCLE ||
									shapeCombo.selectedItem == ParallelCoordinatesPlotter.EMPTY_SQUARE ||
									shapeBorderSizeSlider.value == 0) }"/>
				</mx:HBox>
				
				<mx:HBox width="100%" horizontalGap="0">
					<mx:Label text="Border thickness:" color="0x000000" fontSize="{controlsFontSize}" 
							  toolTip="This controls the border size of the shapes indicating the data points on the axes."/>
					<mx:HSlider id="shapeBorderSizeSlider" 
								width="100%" 
								snapInterval="1"
								tickInterval="1" 
								enabled="{shapeCombo.selectedItem != ParallelCoordinatesPlotter.NO_SHAPE}"
								labels="['0', '1', '2', '3', '4', '5']"
								minimum="0" maximum="5"
								liveDragging="true"/>
				</mx:HBox>
			</userControls:ControlsSubsetBox>
			
			<userControls:ControlsSubsetBox width="100%">
				<mx:Label text="Line Opacity:" 
						  color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip="Use this control to see how transparent lines are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency)."/>
				
				<mx:HSlider id="alphaSlider" 
							width="100%" 
							snapInterval="0.1"
							tickInterval="0.3" labels="{['10%', '40%', '70%', '100%']}" 
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" 
							liveDragging="true"/>
			</userControls:ControlsSubsetBox>
			
			
			<userControls:ControlsSubsetBox width="100%" creationComplete="linkBindableProperty(_plotter.curveType, curvatureButtons, 'selectedValue');">
				<mx:Label text="Line Curvature:" 
						  color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip=""/>
				
				<mx:RadioButtonGroup id="curvatureButtons" />
				<mx:RadioButton label="Straight Line" value="{ParallelCoordinatesPlotter.CURVE_NONE}" 		groupName="curvatureButtons"/>
				<mx:RadioButton label="Away"          value="{ParallelCoordinatesPlotter.CURVE_AWAY}" 		groupName="curvatureButtons"/>
				<mx:RadioButton label="Towards"       value="{ParallelCoordinatesPlotter.CURVE_TOWARDS}" 	groupName="curvatureButtons"/>
				<mx:RadioButton label="Double"        value="{ParallelCoordinatesPlotter.CURVE_DOUBLE}"  	groupName="curvatureButtons"/>
			</userControls:ControlsSubsetBox>
			<userControls:ControlsSubsetBox width="100%">
				<mx:Label text="Line Thickness:" 
						  color="0x000000" fontSize="{controlsFontSize}" 
						  toolTip=""/>
				
				<mx:RadioButtonGroup id="thickessButtons" />
				<mx:RadioButton label="1" value="1"  groupName="thickessButtons"/>
				<mx:RadioButton label="2" value="2"  groupName="thickessButtons"/>
				<mx:RadioButton label="3" value="3"  groupName="thickessButtons"/>
				<mx:RadioButton label="4" value="4"  groupName="thickessButtons"/>
				
			</userControls:ControlsSubsetBox>
			<userControls:ControlsSubsetBox width="100%">
				<mx:CheckBox id="selectionAndProbeOnlyCheckBox" label="Show selection &amp; probe only" 
							 color="0x000000" fontSize="{controlsFontSize}" 
							 toolTip="" change="handleSelectionAndProbeOnlyCheckBox();"/>
			</userControls:ControlsSubsetBox>
			<userControls:ControlsSubsetBox width="100%">
				<mx:CheckBox id="zoomToSubsetCheckBox" label="Zoom to Subset" 
							 color="0x000000" fontSize="{controlsFontSize}"
							 toolTip="Enables automatic zooming to the subset of data currently displayed"
							 creationComplete="linkBindableProperty(_plotter.zoomToSubset, zoomToSubsetCheckBox, 'selected')"/>
			</userControls:ControlsSubsetBox>
			<settings:GridLineSettings tool="{this}"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
